<section id="new">
  <p>
    <%= link_to '돈 약속하기', new_appointment_path(app_type: 'MoneyApp') %>
    <%= link_to '장소 약속하기', new_appointment_path(app_type: 'LocationApp') %>
  </p>

  <article>
    <%= render 'form' do |f| %>
        <% if @app_type == 'LocationApp' %>
            <div>
              <%= f.label :location %>
              <input id="pac-input" class="controls" type="text" placeholder="Search Box">
              <div id="google-map"></div>
              <%= f.hidden_field(:location) %>
            </div>
        <% end %>
    <% end %>
  </article>
</section>



<%# TODO: API키 받아서 환경변수에 설정해주기 %>
<% if @app_type == 'LocationApp' %>
    <script>


        var map;
        var tempMarker = [];
        var hiddenLocation = document.getElementById("appointment_location");


        function initMap() {
            map = new google.maps.Map(document.getElementById('google-map'), {
                center: {lat: 37.551382, lng: 126.992340},
                zoom: 8,
                mapTypeId: 'roadmap',
                scaleControl: true
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });

            map.addListener('click', function (event) {
                addMarker(event.latLng);
            });


        }


        function addMarker(location) {
            deleteMarkers();
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
            tempMarker.push(marker);
            hiddenLocation.value = location;
        }

        function deleteMarkers() {
            for (var i = 0; i < tempMarker.length; i++) {
                tempMarker[i].setMap(null);
            }
            tempMarker = [];
        }


        //        google.maps.event.addDomListener(window, 'load', initMap);
        //        google.maps.event.addDomListener(window, 'page:load', initMap);

        if (window.google) {
            initMap();
        } else {
            $.ajax('https://maps.googleapis.com/maps/api/js?libraries=places&callback=initMap', {
                crossDomain: true,
                dataType: 'script'
            });
        }

    </script>
<% end %>